package controller

import (
	"os"
	"path/filepath"
	"strconv"
	"time"

	"github.com/YerzatCode/ReportApp_backend/pkg/db"
	"github.com/YerzatCode/ReportApp_backend/pkg/models"
	"github.com/gin-gonic/gin"
)

// üìå –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URL
func UploadImage(c *gin.Context) {
	file, err := c.FormFile("image")
	if err != nil {
		c.JSON(400, gin.H{"error": "No image provided"})
		return
	}

	userID := c.PostForm("user_id")
	if userID == "" {
		c.JSON(400, gin.H{"error": "User ID is required"})
		return
	}

	savePath := filepath.Join("uploads", "incidents", userID)
	if _, err := os.Stat(savePath); os.IsNotExist(err) {
		os.MkdirAll(savePath, os.ModePerm)
	}

	fileName := strconv.FormatInt(time.Now().UnixNano(), 10) + filepath.Ext(file.Filename)
	filePath := filepath.Join(savePath, fileName)

	if err := c.SaveUploadedFile(file, filePath); err != nil {
		c.JSON(500, gin.H{"error": "Failed to save image"})
		return
	}

	imageURL := filePath // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

	c.JSON(200, gin.H{"image_url": imageURL})
}

func ReportIncident(c *gin.Context) {
	var incident models.Incident
	if err := c.ShouldBindJSON(&incident); err != nil {
		c.JSON(400, gin.H{"error": "Invalid input", "details": err.Error()})
		return
	}

	// // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º images –≤ JSON-—Å—Ç—Ä–æ–∫—É
	// imagesJSON, err := json.Marshal(incident.Images)
	// if err != nil {
	// 	c.JSON(500, gin.H{"error": "Failed to process images", "details": err.Error()})
	// 	return
	// }
	// incident.Images = images// –ó–∞–º–µ–Ω—è–µ–º []string –Ω–∞ JSON-—Å—Ç—Ä–æ–∫—É

	incident.Status = "open"

	if err := db.DB.Create(&incident).Error; err != nil {
		c.JSON(500, gin.H{"error": "Failed to save incident", "details": err.Error()})
		return
	}

	c.JSON(201, gin.H{"message": "Incident reported", "incident": incident})
}

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
func GetIncidents(c *gin.Context) {
	var incidents []models.Incident
	db.DB.Find(&incidents)
	c.JSON(200, gin.H{"incidents": incidents})
}

// üìå –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ ID
func GetIncidentByID(c *gin.Context) {
	var incident models.Incident
	id := c.Param("id")

	if err := db.DB.Where("id = ?", id).First(&incident).Error; err != nil {
		c.JSON(404, gin.H{"error": "Incident not found"})
		return
	}

	c.JSON(200, gin.H{"incident": incident})
}

func UpdateIncidentStatus(c *gin.Context) {
	var incident models.Incident
	id := c.Param("id")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç
	if err := db.DB.Where("id = ?", id).First(&incident).Error; err != nil {
		c.JSON(404, gin.H{"error": "Incident not found"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	var requestBody struct {
		Status string `json:"status"`
	}
	if err := c.ShouldBindJSON(&requestBody); err != nil {
		c.JSON(400, gin.H{"error": "Invalid input", "details": err.Error()})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
	incident.Status = requestBody.Status
	if err := db.DB.Save(&incident).Error; err != nil {
		c.JSON(500, gin.H{"error": "Failed to update incident status", "details": err.Error()})
		return
	}

	c.JSON(200, gin.H{"message": "Incident status updated", "incident": incident})
}
